name: CI
on: [push, pull_request]
env:
  GRADLE_OPTS: "-Dorg.gradle.internal.launcher.welcomeMessageEnabled=false"

defaults:
  run:
    shell: bash

jobs:
  validate-gradle-wrapper:
    name: "Validate Gradle wrapper"
    runs-on: ubuntu-20.04

    steps:
      - name: Check out code
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1.0.4

  build-wrapper:
    name: "Build wrapper libraries for JVM"
    runs-on: macos-11
    steps:
      - name: Check out code
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3.0.0
        with:
          java-version: 17.0.2+8
          distribution: temurin

      - name: Cache Gradle-managed packages
        id: cache-gradle-packages
        uses: actions/cache@v3.0.1
        with:
          path: ~/.gradle/caches
          key: gradle-wrapper-packages-${{ runner.os }}-${{ hashFiles('gradle/libs.versions.toml') }}
          restore-keys: gradle-wrapper-packages-${{ runner.os }}

      - name: Cache Golang packages
        id: cache-golang-packages
        uses: actions/cache@v3.0.1
        with:
          path: ~/go
          key: go-wrapper-packages-${{ runner.os }}-${{ hashFiles('golang-wrapper/src/go.*') }}

      - name: Cache Kotlin/Native dependencies
        id: cache-kotlin-native
        uses: actions/cache@v3.0.1
        with:
          path: ~/.konan
          key: kotlin-native-wrapper-${{ runner.os }}-${{ hashFiles('gradle/libs.versions.toml') }}
          restore-keys: kotlin-native-wrapper-${{ runner.os }}

      - name: Cache tools
        id: cache-tools
        uses: actions/cache@v3.0.1
        with:
          path: golang-wrapper/build/tools
          key: tools-${{ runner.os }}-${{ hashFiles('**/*.gradle.kts', 'buildSrc/src/**/*.kt') }}

      - name: Build and test
        run: ./gradlew golang-wrapper:buildSharedLibs

      - name: Stop Gradle daemon
        run: ./gradlew --stop && sleep 5 # HACK: wait for Gradle to shut down to prevent failures like https://github.com/batect/docker-client/runs/4576861141?check_suite_focus=true

      - name: Clean up dependencies before caching
        if: steps.cache-gradle-packages.outputs.cache-hit != 'true'
        run: |
          rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
          rm -fr $HOME/.gradle/caches/*/plugin-resolution/
          rm -fr $HOME/.gradle/caches/*/scripts/
          rm -fr $HOME/.gradle/caches/*/scripts-remapped/
          rm -fr $HOME/.gradle/caches/*/fileHashes/
          rm -f  $HOME/.gradle/caches/*/fileContent/*.lock
          rm -f  $HOME/.gradle/caches/*/javaCompile/*.lock
          rm -f  $HOME/.gradle/caches/*/executionHistory/*.lock
          rm -f  $HOME/.gradle/caches/*/generated-gradle-jars/*.lock
          rm -f  $HOME/.gradle/caches/jars-3/*.lock
          rm -f  $HOME/.gradle/caches/jars-8/*.lock
          rm -f  $HOME/.gradle/caches/transforms-1/transforms-1.lock
          rm -f  $HOME/.gradle/caches/journal-1/file-access.bin
          rm -f  $HOME/.gradle/caches/journal-1/*.lock

      - name: Upload Golang wrapper libraries
        uses: actions/upload-artifact@v3.0.0
        with:
          name: wrapper-libs
          path: golang-wrapper/build/libs
          if-no-files-found: error

  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux, latest Docker
            os: ubuntu-20.04
            dockerVersion: latest

          - name: Linux, Docker 19.03.10
            os: ubuntu-20.04
            dockerVersion: 5:19.03.10~3-0~ubuntu-focal

          - name: Linux, latest Docker, TLS over TCP connection
            os: ubuntu-20.04
            dockerVersion: latest
            useTLS: true

          - name: Windows, default Docker
            os: windows-2019
            containerOperatingSystem: windows
            dockerVersion: useRunnerDefault

          - name: macOS, no Docker
            os: macos-11
            disableDockerDaemonTests: 1
            dockerVersion: useRunnerDefault

    needs:
      - build-wrapper

    permissions:
      packages: read

    name: "Build and test (${{ matrix.name }})"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3.0.0
        with:
          java-version: 17.0.2+8
          distribution: temurin

      - name: Cache Gradle-managed packages
        id: cache-gradle-packages
        uses: actions/cache@v3.0.1
        with:
          path: ~/.gradle/caches
          key: gradle-packages-${{ runner.os }}-${{ hashFiles('gradle/libs.versions.toml') }}
          restore-keys: gradle-packages-${{ runner.os }}

      - name: Cache Golang packages
        id: cache-golang-packages
        uses: actions/cache@v3.0.1
        with:
          path: ~/go
          key: go-packages-${{ runner.os }}-${{ hashFiles('golang-wrapper/src/go.*') }}

      - name: Cache Kotlin/Native dependencies
        id: cache-kotlin-native
        uses: actions/cache@v3.0.1
        with:
          path: ~/.konan
          key: kotlin-native-${{ runner.os }}-${{ hashFiles('gradle/libs.versions.toml') }}
          restore-keys: kotlin-native-${{ runner.os }}

      - name: Cache tools
        id: cache-tools
        uses: actions/cache@v3.0.1
        with:
          path: golang-wrapper/build/tools
          key: tools-${{ runner.os }}-${{ hashFiles('**/*.gradle.kts', 'buildSrc/src/**/*.kt') }}

      - name: Install Docker
        run: ./.github/workflows/ci/install_docker.sh ${{ matrix.dockerVersion }}
        if: matrix.dockerVersion != 'useRunnerDefault'

      - name: Configure Docker to use TLS over TCP
        run: ./.github/workflows/ci/configure_docker_tls.sh
        if: matrix.useTLS == true

      # Why do we get all libraries for all operating systems? This is to ensure that we embed the libraries
      # for all operating systems in the .jar produced for the JVM, regardless of the system that the .jar is
      # built on.
      - name: Fetch wrapper libraries
        uses: actions/download-artifact@v3.0.0
        with:
          name: wrapper-libs
          path: golang-wrapper/build/libs

      # This step is required so that we can test pulling images from a registry that requires authentication.
      - name: Log in to GitHub Container Registry
        run: echo "$GITHUB_TOKEN" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: matrix.disableDockerDaemonTests != 1

      - name: Build, test and package
        run: ./gradlew client:check client:jvmJar
        env:
          DISABLE_DOCKER_DAEMON_TESTS: ${{ matrix.disableDockerDaemonTests }}
          DOCKER_CONTAINER_OPERATING_SYSTEM: ${{ matrix.containerOperatingSystem }}
          RUN_TARGETS_FOR_OTHER_HOSTS: false

      - name: Check JAR contains native libraries for all operating systems
        run: ./gradlew client:checkJarContents

      - name: Check for outdated generated code
        run: if [ ! -z "$(git status --porcelain)" ]; then echo "Generated code changed. Do you need to run './gradlew generate'?">/dev/stderr; echo; git status --porcelain; echo; git diff; exit 1; fi

      - name: Stop Gradle daemon
        run: ./gradlew --stop && sleep 5 # HACK: wait for Gradle to shut down to prevent failures like https://github.com/batect/docker-client/runs/4576861141?check_suite_focus=true

      - name: Clean up dependencies before caching
        if: steps.cache-gradle-packages.outputs.cache-hit != 'true'
        run: |
          rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
          rm -fr $HOME/.gradle/caches/*/plugin-resolution/
          rm -fr $HOME/.gradle/caches/*/scripts/
          rm -fr $HOME/.gradle/caches/*/scripts-remapped/
          rm -fr $HOME/.gradle/caches/*/fileHashes/
          rm -f  $HOME/.gradle/caches/*/fileContent/*.lock
          rm -f  $HOME/.gradle/caches/*/javaCompile/*.lock
          rm -f  $HOME/.gradle/caches/*/executionHistory/*.lock
          rm -f  $HOME/.gradle/caches/*/generated-gradle-jars/*.lock
          rm -f  $HOME/.gradle/caches/jars-3/*.lock
          rm -f  $HOME/.gradle/caches/jars-8/*.lock
          rm -f  $HOME/.gradle/caches/transforms-1/transforms-1.lock
          rm -f  $HOME/.gradle/caches/journal-1/file-access.bin
          rm -f  $HOME/.gradle/caches/journal-1/*.lock

  check-wrapper:
    name: "Lint wrapper library"
    runs-on: macos-11
    steps:
      - name: Check out code
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3.0.0
        with:
          java-version: 17.0.2+8
          distribution: temurin

      - name: Cache Gradle-managed packages
        id: cache-gradle-packages
        uses: actions/cache@v3.0.1
        with:
          path: ~/.gradle/caches
          key: gradle-lint-packages-${{ runner.os }}-${{ hashFiles('gradle/libs.versions.toml') }}
          restore-keys: gradle-lint-packages-${{ runner.os }}

      - name: Cache Golang packages
        id: cache-golang-packages
        uses: actions/cache@v3.0.1
        with:
          path: ~/go
          key: go-lint-packages-${{ runner.os }}-${{ hashFiles('golang-wrapper/src/go.*') }}

      - name: Cache Kotlin/Native dependencies
        id: cache-kotlin-native
        uses: actions/cache@v3.0.1
        with:
          path: ~/.konan
          key: kotlin-native-lint-${{ runner.os }}-${{ hashFiles('gradle/libs.versions.toml') }}
          restore-keys: kotlin-native-lint-${{ runner.os }}

      - name: Cache tools
        id: cache-tools
        uses: actions/cache@v3.0.1
        with:
          path: golang-wrapper/build/tools
          key: tools-${{ runner.os }}-${{ hashFiles('**/*.gradle.kts', 'buildSrc/src/**/*.kt') }}

      - name: Run linting
        # :golang-wrapper:buildSharedLibWindowsX64: disabled until https://github.com/ziglang/zig/issues/9711 is fixed (or Zig 0.9.2 or later is released, which apparently fixes this issue)
        run: ./gradlew golang-wrapper:check --exclude-task :golang-wrapper:buildSharedLibWindowsX64

      - name: Stop Gradle daemon
        run: ./gradlew --stop && sleep 5 # HACK: wait for Gradle to shut down to prevent failures like https://github.com/batect/docker-client/runs/4576861141?check_suite_focus=true

      - name: Clean up dependencies before caching
        if: steps.cache-gradle-packages.outputs.cache-hit != 'true'
        run: |
          rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
          rm -fr $HOME/.gradle/caches/*/plugin-resolution/
          rm -fr $HOME/.gradle/caches/*/scripts/
          rm -fr $HOME/.gradle/caches/*/scripts-remapped/
          rm -fr $HOME/.gradle/caches/*/fileHashes/
          rm -f  $HOME/.gradle/caches/*/fileContent/*.lock
          rm -f  $HOME/.gradle/caches/*/javaCompile/*.lock
          rm -f  $HOME/.gradle/caches/*/executionHistory/*.lock
          rm -f  $HOME/.gradle/caches/*/generated-gradle-jars/*.lock
          rm -f  $HOME/.gradle/caches/jars-3/*.lock
          rm -f  $HOME/.gradle/caches/jars-8/*.lock
          rm -f  $HOME/.gradle/caches/transforms-1/transforms-1.lock
          rm -f  $HOME/.gradle/caches/journal-1/file-access.bin
          rm -f  $HOME/.gradle/caches/journal-1/*.lock

  publish:
    if: false # Disabled until https://github.com/square/okio/pull/980 is merged
    # if: github.repository == 'batect/docker-client' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) && github.event_name == 'push'

    needs:
      - build-and-test
      - check-wrapper

    env:
      SONATYPE_USERNAME: batect-docker-client-github-actions

    name: "Publish"
    runs-on: macos-11
    steps:
      - name: Check out code
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3.0.0
        with:
          java-version: 17.0.2+8
          distribution: temurin

      - name: Cache Gradle-managed packages
        id: cache-gradle-packages
        uses: actions/cache@v3.0.1
        with:
          path: ~/.gradle/caches
          key: gradle-kotlin-packages-${{ runner.os }}-${{ hashFiles('gradle/libs.versions.toml') }}
          restore-keys: gradle-kotlin-packages-${{ runner.os }}

      - name: Cache Golang packages
        id: cache-golang-packages
        uses: actions/cache@v3.0.1
        with:
          path: ~/go
          key: go-packages-${{ runner.os }}-${{ hashFiles('golang-wrapper/src/go.*') }}

      - name: Cache Kotlin/Native dependencies
        id: cache-kotlin-native
        uses: actions/cache@v3.0.1
        with:
          path: ~/.konan
          key: kotlin-native-${{ runner.os }}-${{ hashFiles('gradle/libs.versions.toml') }}
          restore-keys: kotlin-native-${{ runner.os }}

      - name: Cache tools
        id: cache-tools
        uses: actions/cache@v3.0.1
        with:
          path: golang-wrapper/build/tools
          key: tools-${{ runner.os }}-${{ hashFiles('**/*.gradle.kts', 'buildSrc/src/**/*.kt') }}

      # Why do we get all libraries for all operating systems? This is to ensure that we embed the libraries
      # for all operating systems in the .jar produced for the JVM, regardless of the system that the .jar is
      # built on.
      - name: Fetch wrapper libraries
        uses: actions/download-artifact@v3.0.0
        with:
          name: wrapper-libs
          path: golang-wrapper/build/libs

      - name: Check JAR contains native libraries for all operating systems
        run: ./gradlew client:checkJarContents

      - name: Publish snapshot
        run: ./gradlew publishSnapshot
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ env.SONATYPE_USERNAME }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_PASSWORD }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: github.repository == 'batect/docker-client' && github.ref == 'refs/heads/main' && github.event_name == 'push'

      - name: Publish release
        run: ./gradlew publishRelease
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ env.SONATYPE_USERNAME }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_PASSWORD }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: github.repository == 'batect/docker-client' && startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'

      - name: Stop Gradle daemon
        run: ./gradlew --stop && sleep 5 # HACK: wait for Gradle to shut down to prevent failures like https://github.com/batect/docker-client/runs/4576861141?check_suite_focus=true

      - name: Clean up dependencies before caching
        if: steps.cache-gradle-packages.outputs.cache-hit != 'true'
        run: |
          rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
          rm -fr $HOME/.gradle/caches/*/plugin-resolution/
          rm -fr $HOME/.gradle/caches/*/scripts/
          rm -fr $HOME/.gradle/caches/*/scripts-remapped/
          rm -fr $HOME/.gradle/caches/*/fileHashes/
          rm -f  $HOME/.gradle/caches/*/fileContent/*.lock
          rm -f  $HOME/.gradle/caches/*/javaCompile/*.lock
          rm -f  $HOME/.gradle/caches/*/executionHistory/*.lock
          rm -f  $HOME/.gradle/caches/*/generated-gradle-jars/*.lock
          rm -f  $HOME/.gradle/caches/jars-3/*.lock
          rm -f  $HOME/.gradle/caches/jars-8/*.lock
          rm -f  $HOME/.gradle/caches/transforms-1/transforms-1.lock
          rm -f  $HOME/.gradle/caches/journal-1/file-access.bin
          rm -f  $HOME/.gradle/caches/journal-1/*.lock
